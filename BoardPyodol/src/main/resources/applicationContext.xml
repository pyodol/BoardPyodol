<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">
 	<!--  <aop:aspectj-autoproxy></aop:aspectj-autoproxy>-->
	<context:component-scan base-package="com.springbook.biz" />
	
	<context:property-placeholder location="classpath:config/database.properties"/> 
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	
 	<bean id ="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource"  ref="dataSource"></property>
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="txManager">
	 	<tx:attributes>
	 		<tx:method name="*"/>
	 		<tx:method name="get*" read-only="true"/>
	 	</tx:attributes>
	</tx:advice>
   
	<aop:config>
		<aop:pointcut id="txPointcut" expression="execution(* com.springbook.biz..*Service.*(..))" />
		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
	</aop:config>
	
	<!--<bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl" >
		<property name ="userDAO" ref="userDAO"/>
	</bean>-->
	
	<!--  <bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO" ></bean>-->
	<!--  <bean id ="log" class="com.springbook.biz.common.LogAdvice">
	</bean>
	
	<bean id ="beforelog" class="com.springbook.biz.common.BeforeLogAdvice">
	</bean>
	<bean id ="afterlogreturning" class="com.springbook.biz.common.AfterReturningAdvice">
	</bean>
	<bean id ="afterthrowlog" class="com.springbook.biz.common.AfterThrowAdvice">
	</bean>
	<bean id ="afterfianllog" class="com.springbook.biz.common.AfterAdvice">
	</bean>
	<bean id ="Aroundlog" class="com.springbook.biz.common.AroundAdvice">
	</bean>-->
	<!--  <aop:config>
		<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))" />
		<aop:pointcut id="getPointcut" expression="execution(* com.springbook.biz..*Impl.get*(..))" />-->
		<!--      <aop:aspect ref="log">
			<aop:before method="printLog" pointcut-ref="allPointcut"/>
		</aop:aspect>
		<aop:aspect ref="afterthrowlog">
			<aop:after-throwing method="afterthrowlog" pointcut-ref="allPointcut" throwing="exceptObj" />
		</aop:aspect>
		 <aop:aspect ref="afterlogreturning">
			<aop:after-returning method="afterRetuninglog" pointcut-ref="getPointcut" returning="returnObj"/>
		</aop:aspect>-->
		<!--    <aop:aspect ref="afterfianllog">
			<aop:after method="afterlog" pointcut-ref="allPointcut"/>
		</aop:aspect>-->
		
		<!--  <aop:aspect ref="Aroundlog">
			<aop:around method="AroundLog" pointcut-ref="allPointcut"/>
		</aop:aspect>
	</aop:config>-->

</beans>
